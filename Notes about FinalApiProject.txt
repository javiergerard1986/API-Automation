1. Tags were not implemented. In order to work with it:
	a. The tag name is provided over each scenario like: @AddPlaceApi
	b. When you want to execute all the scenarios inside a tag, you will need to add the tag= "tagName" in the TestRunner class, example: 
		@CucumberOptions(features="src/test/java/features", glue= {"stepDefinitions"}, tag="@AddPlaceTag")

2. Hooks were not implemented. In order to work with it:
	a. Create  Hooks package
	b. Create  Hooks class
	c. @Before: all the steps inside the method tagged as Before will be executed after each test case. You can create several hooks, and specify with the <@tagName> 
		which hook will be executed per each test case.
	d. @After: all the steps inside the method tagged as After will be executed after each test case. You can create several hooks, and specify with the <@tagName>
		which hook will be executed per each test case.

3. Run test cases from CMD using maven commands:
	a. mvn compile: this command compile the project. 
	b. mvn test: this command compile the project and ejecute all tests.
	c. mvn test -Dcucumber.options="--tags @AddPlace": this is the way to execute all the tests under a specified tag, in this case the @AddPlaceTag

4. Reporting:
	a. Add the next content into the pom.xml file after the dependencies section
		 <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <testFailureIgnore>true</testFailureIgnore>
                </configuration>
            </plugin>
            <plugin>
                <groupId>net.masterthought</groupId>
                <artifactId>maven-cucumber-reporting</artifactId>
                <version>5.6.2</version>
                <executions>
                    <execution>
                        <id>execution</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <projectName>cucumber-jvm-example</projectName>
                            <!-- optional, per documentation set this to "true" to bypass generation of Cucumber Reports entirely, defaults to false if not specified -->
                            <skip>false</skip>
                            <!-- output directory for the generated report -->
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <!-- optional, defaults to outputDirectory if not specified -->
                            <inputDirectory>${project.build.directory}/jsonReports</inputDirectory>
                            <jsonFiles>
                                <!-- supports wildcard or name pattern -->
                                <param>**/*.json</param>
                            </jsonFiles>
                            <!-- optional, defaults to outputDirectory if not specified -->
                            
                            <parallelTesting>false</parallelTesting>
                            <!-- optional, set true to group features by its Ids -->
                            <mergeFeaturesById>false</mergeFeaturesById>
                            <!-- optional, set true to get a final report with latest results of the same test from different test runs -->
                            <mergeFeaturesWithRetest>false</mergeFeaturesWithRetest>
                            <!-- optional, set true to fail build on test failures -->
                            <checkBuildResult>false</checkBuildResult>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

	b. Specify the path to create the report in the TestRunner class, example: plugin="json:target/jsonReports/cucumber-report.json"
	c. Execute the mvn test verify command